service: libraryManagmentSystem
# Create an optimized package for our functions
package:
  individually: true
plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables
  # - serverless-plugin-thundra
  - serverless-webpack
# custom:
#   webpack:
#     keepOutputDirectory: true
provider:
  name: aws
  runtime: nodejs12.x
  stage: prod
  region: us-east-1
  # timeout: 30
  # These environment variables are made available to our functions
  # under process.env.
  environment:
    tableName: "Books"
    stripeSecretKey: ${env:STRIPE_SECRET_KEY}
    # thundra_apiKey: “626f7d15-853a-4a52-bbb1-39adfe9f88ed”
    # thundra_agent_lambda_debug_enable: true
    # thundra_agent_lambda_debugger_auth_token: “BaNquTzrYbOQ+U0bwyXgME5xk/yV9K8EF6pwMfKEwiY=”
  # ‘iamRoleStatements’ defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
        - dynamodb:AmazonDynamoDBFullAccess
      Resource: "arn:aws:dynamodb:us-east-1:*:*"
functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /notes
  # - method: POST request
  create:
    handler: create.main
    events:
      - http:
          path: libraryManagement
          method: post
          cors:
            origin:
              Access-Control-Allow-Origin: '*'
              Access-Control-Allow-Credentials: true
            allowCredentials: false
          authorizer:
            arn: arn:aws:cognito-idp:ap-south-1:323270932585:userpool/ap-south-1_NmptlLWJM

  createUser:
    handler: createUser.main
    events:
      - http:
          path: libraryManagement/user
          method: post
          cors:
            origin:
              Access-Control-Allow-Origin: '*'
              Access-Control-Allow-Credentials: true
            allowCredentials: false
          authorizer:
            arn: arn:aws:cognito-idp:ap-south-1:323270932585:userpool/ap-south-1_NmptlLWJM
    # environment:
    #   thundra_apiKey: "626f7d15-853a-4a52-bbb1-39adfe9f88ed"
    #   thundra_agent_lambda_debug_enable: true
    #   thundra_agent_lambda_debugger_auth_token: "BaNquTzrYbOQ+U0bwyXgME5xk/yV9K8EF6pwMfKEwiY="
  get:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /notes/{id}
    # - method: GET request
    handler: get.main
    events:
      - http:
          path: libraryManagement/{id}
          method: get
          cors: true
          authorizer: aws_iam
  list:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /notes
    # - method: GET request
    handler: list.main
    events:
      - http:
          path: libraryManagement
          method: get
          cors: true
          authorizer: aws_iam

  update:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /notes/{id}
    # - method: PUT request
    handler: update.main
    events:
      - http:
          path: libraryManagement/{id}
          method: put
          cors: true
          authorizer: aws_iam
  delete:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    # - path: url path is /notes/{id}
    # - method: DELETE request
    handler: delete.main
    events:
      - http:
          path: libraryManagement/{id}
          method: delete
          cors: true
          authorizer: aws_iam
  billing:
    # Defines an HTTP API endpoint that calls the main function in billing.js
    # - path: url path is /billing
    # - method: POST request
    handler: billing.main
    events:
      - http:
          path: billing
          method: post
          cors: true
          authorizer: aws_iam
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
